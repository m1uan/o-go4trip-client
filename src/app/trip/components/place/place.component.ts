// 
// File generated by `npm run generate:blank place/component/place`
//
// After activate you can access from 
//
// http://localhost:5000/#/dev/place/component/place
//
//
// for ACTIVATE please add IMPORT and ROUTE in `src/app/dashboard/dashboard.ts`
//
// /*
//  * Here is router imports
//  */
// import { Place } from './place/component/place';
// 
//  ..
//  ..
//  ..
//
//  @RouteConfig([
//      { path: '/dev/place/component/place', component: Place, name: 'Placeplace-component/place' },   
//
//  ..
//  .. 
//


import { Component, ViewContainerRef, ElementRef, ViewChild, NgZone } from '@angular/core';

import { AppState } from '../app.service';


import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Comment } from '../model/comment';
import { Observable } from 'rxjs/Rx';


import { Router, ActivatedRoute, Params } from '@angular/router';

import * as numeral from 'numeral';
import * as moment from 'moment';
import * as _ from 'lodash';

import { AlertComponent } from 'ng2-bootstrap/ng2-bootstrap';

import {EviService} from '../../../shared/services/evi.service';
import {GMapsService} from '../../../shared/services/gmaps.service';

import { FormControl } from "@angular/forms";
import { MapsAPILoader } from 'angular2-google-maps/core';

import {TripService} from '../../services/trip.services'

let $ = require('jquery/dist/jquery.js');
let foundation = require('foundation-sites/dist/js/foundation.js');

declare var google: any;

const UNKNOW_PLACE_NAME = "Unknow place :-("

let data = {
  // lat lng
  // 49.22297320000001 17.85482120000006 - vizovice
  // 49.2244365 17.662763499999983 - zlin
  // 49.33892509999999 17.99385230000007 - vsetin
  // 48.1485965 17.107747700000004 - bratislava
  // 48.2081743 16.37381890000006 - viden
  // 50.06465009999999 19.94497990000002 - krakov
  // 50.0755381 14.43780049999998 - praha
  // 49.1950602 16.606837100000007 - brno
}

function findType(addressComponents, type){
  let res = '';

  addressComponents.some(ac=>{
    let typeIndex = ac.types.indexOf(type);

    if(typeIndex != -1){
      res = ac.short_name;
      return true;
    }

  })

  return res;

}

function placeNameGenerator(addressComponents){
  let admin1 = findType(addressComponents, 'administrative_area_level_2');
  
  if(!admin1){
    admin1 = findType(addressComponents, 'administrative_area_level_1');
  }
  
  let locality = findType(addressComponents, 'locality');

  return (locality ? locality + ', ' : '') 
                    + (admin1 ? admin1 + ', ' : '')
                    + findType(addressComponents, 'country');
}

@Component({
  // The selector is what angular internally uses
  // for `document.querySelectorAll(selector)` in our index.html
  // where, in this case, selector is the string 'home'
  selector: 'home',  // <home></home>
  // We need to tell Angular's Dependency Injection which providers are in our app.
  providers: [
  ],
   styleUrls: [ './place.component.scss' ],
  // Every Angular template is first compiled by the browser before Angular runs it's compiler
  templateUrl: './place.component.html'
})
export class PlaceComponent {
  // Set our default values
  public lat : number;
  public lng : number;

  public marker_lat : number;
  public marker_lng : number;

  public zoom : number = 6;

  public tripId;
  public uuid;
  public afterIndex;

  public geocoder;
  public geocoder_loading = false;

  public placeName : string = null;

  public googlePlaceId : string = null;

  @ViewChild("googleMapInfoWindow") public googleMapInfoWindowView : ElementRef;

  @ViewChild("searchGoogle") public searchElementRef: ElementRef;
  public searchControl: FormControl;

  // TypeScript public modifiers
  constructor(private evi : EviService, 
                private route : ActivatedRoute, 
                private router : Router,
                private _el: ElementRef , 
                private _gmaps : GMapsService,
                private mapsAPILoader: MapsAPILoader,
                private _tripService: TripService,
                public zone: NgZone) {
      
  }

  ngOnInit() {

    const sub = this.route.params.subscribe(params => {
       this.tripId = params['tripid'];
       this.uuid = params['uuid'];
       this.afterIndex = params['afterIndex']
        // could happend the visitor of this page
        // is comming with empty id -> show just search box
        if(params['lat'] && params['lng']){
            this.lat = Number(params['lat']);
            this.lng = Number(params['lng']);
            //console.log(this.lat, this.lng);
        }
     });

    //create search FormControl
    this.searchControl = new FormControl();

    // http://brianflove.com/2016/10/18/angular-2-google-maps-places-autocomplete/
    this.mapsAPILoader.load().then(() => {
      
      this.geocoder = new google.maps.Geocoder;

      
      
      let autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, {
        //  types: ["address"]
      });
      
      autocomplete.addListener("place_changed", () => {
        //get the place result
        let place: google.maps.places.PlaceResult = autocomplete.getPlace();

        // for some reason the zone doesn't handle changes 
        // when they komming from google

        this.zone.run(()=>{
        //set latitude and longitude
          this.lat = this.marker_lat = place.geometry.location.lat();
          this.lng = this.marker_lng = place.geometry.location.lng();
          
          this.placeName = this.placeName =  placeNameGenerator(place.address_components) || place.formatted_address;

          this.googlePlaceId = place.place_id;
        });
        
      });
    });
    
    // just in case the lat and lng was not set
    // put the current location
    if(!this.lat || !this.lng){
      this.setCurrentPosition();
    }
    
  }

  private setCurrentPosition() {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition((position) => {
        this.lat = position.coords.latitude;
        this.lng = position.coords.longitude;
         console.log("geolocation", this.lat, this.lng);
        this.zoom = 12;
      });
    }
  }



  addPlaceToTripOrCreateNewTrip(){
    this.geocoder_loading = true;
    if(this.tripId && this.uuid){

        this._tripService.addPlaceToAlternative(this.marker_lat, this.marker_lng, this.placeName, this.uuid, this.afterIndex, this.googlePlaceId, (data)=>{
          this.router.navigate(['/trip', this.tripId, 'way', this.uuid ]);
        });

      } else {
        // in case we don't know id of trip and uuid of alternative
        // we have to create new trip
        this._tripService.createTrip(this.marker_lat, this.marker_lng, this.placeName, this.googlePlaceId, (data)=>{
          this.router.navigate(['/trip', data.id ]);
        })
      }
  }

  ngAfterViewInit() {
    $(this._el.nativeElement.ownerDocument).foundation();
  }

  onSearch(){
    
  }

  onMapClick(data){
    //this.googleMapInfoWindowView.open();
    this.marker_lat = null;
    this.marker_lng = null;

    this.geocoder_loading = true;
    this.placeName = null;

    this.marker_lat = data.coords.lat;
    this.marker_lng = data.coords.lng;

    let location = {
      'location': {
          lat: this.marker_lat,
          lng : this.marker_lng
      }
    };

    this.geocoder.geocode(location, (results, status) => {
        
        this.zone.run(()=>{
          this.updatePlaceNameFromGeoCodeData(results, status);
        })
        

        console.log('results,status', results, status);
    });

  }

  updatePlaceNameFromGeoCodeData(results, status){
    this.geocoder_loading = false;

        if(results.length > 0){
          
          let addressComponents = results[0].address_components;
          
          // construct name from street[1] + city[2] + state[3]
          if(addressComponents && addressComponents.length>3){
              this.placeName =  placeNameGenerator(addressComponents);
          } else {
            // use formated address
            this.placeName = results[0].formatted_address;
          }

          this.googlePlaceId = results[0].place_id;

        } else {

          // the google can't name this place
          this.placeName = UNKNOW_PLACE_NAME
        }
  }

  onInfoWindowClose(event){
    console.log('onInfoWindowClose', event);
  }

}