// 
// File generated by `npm run generate:blank place/component/place`
//
// After activate you can access from 
//
// http://localhost:5000/#/dev/place/component/place
//
//
// for ACTIVATE please add IMPORT and ROUTE in `src/app/dashboard/dashboard.ts`
//
// /*
//  * Here is router imports
//  */
// import { Place } from './place/component/place';
// 
//  ..
//  ..
//  ..
//
//  @RouteConfig([
//      { path: '/dev/place/component/place', component: Place, name: 'Placeplace-component/place' },   
//
//  ..
//  .. 
//


import { Component, ViewContainerRef, ElementRef, ViewChild } from '@angular/core';

import { AppState } from '../app.service';


import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Comment } from '../model/comment';
import { Observable } from 'rxjs/Rx';


import { Router, ActivatedRoute, Params } from '@angular/router';

import * as numeral from 'numeral';
import * as moment from 'moment';
import * as _ from 'lodash';

import { AlertComponent } from 'ng2-bootstrap/ng2-bootstrap';

import {EviService} from '../../../shared/services/evi.service';
import {GMapsService} from '../../../shared/services/gmaps.service';

import { FormControl } from "@angular/forms";
import { MapsAPILoader } from 'angular2-google-maps/core';

import {TripService} from '../../services/trip.services'

let $ = require('jquery/dist/jquery.js');
let foundation = require('foundation-sites/dist/js/foundation.js');

declare var google: any;

let data = {
  // lat lng
  // 49.22297320000001 17.85482120000006 - vizovice
  // 49.2244365 17.662763499999983 - zlin
  // 49.33892509999999 17.99385230000007 - vsetin
  // 48.1485965 17.107747700000004 - bratislava
  // 48.2081743 16.37381890000006 - viden
  // 50.06465009999999 19.94497990000002 - krakov
  // 50.0755381 14.43780049999998 - praha
  // 49.1950602 16.606837100000007 - brno
}

@Component({
  // The selector is what angular internally uses
  // for `document.querySelectorAll(selector)` in our index.html
  // where, in this case, selector is the string 'home'
  selector: 'home',  // <home></home>
  // We need to tell Angular's Dependency Injection which providers are in our app.
  providers: [
  ],
   styleUrls: [ './place.component.scss' ],
  // Every Angular template is first compiled by the browser before Angular runs it's compiler
  templateUrl: './place.component.html'
})
export class PlaceComponent {
  // Set our default values
  public lat : number;
  public lng : number;
  public zoom : number = 6;

  public tripId;
  public uuid;
  public afterIndex;

  @ViewChild("searchGoogle") public searchElementRef: ElementRef;
  public searchControl: FormControl;

  // TypeScript public modifiers
  constructor(private evi : EviService, 
                private route : ActivatedRoute, 
                private router : Router,
                private _el: ElementRef , 
                private _gmaps : GMapsService,
                private mapsAPILoader: MapsAPILoader,
                private _tripService: TripService) {
      
  }

  ngOnInit() {

    const sub = this.route.params.subscribe(params => {
       this.tripId = params['tripid'];
       this.uuid = params['uuid'];
       this.afterIndex = params['afterIndex']
        // could happend the visitor of this page
        // is comming with empty id -> show just search box
        if(params['lat'] && params['lng']){
            this.lat = Number(params['lat']);
            this.lng = Number(params['lng']);
            //console.log(this.lat, this.lng);
        }
     });

    //create search FormControl
    this.searchControl = new FormControl();

    // http://brianflove.com/2016/10/18/angular-2-google-maps-places-autocomplete/
    this.mapsAPILoader.load().then(() => {
      let autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, {
      //  types: ["address"]
      });
      autocomplete.addListener("place_changed", () => {
        //get the place result
        let place: google.maps.places.PlaceResult = autocomplete.getPlace();

        
        //set latitude and longitude
        this.lat = place.geometry.location.lat();
        this.lng = place.geometry.location.lng();
         
        


        if(this.tripId && this.uuid){

          this._tripService.addPlaceToAlternative(this.lat, this.lng, place.name, this.uuid, this.afterIndex, (data)=>{
            this.router.navigate(['/trip', this.tripId, 'alternative', this.uuid ]);
          });

        } else {
          // in case we don't know id of trip and uuid of alternative
          // we have to create new trip
          this._tripService.createTrip(this.lat, this.lng, place.name, (data)=>{
            this.router.navigate(['/trip', data.id, 'alternative', data.uuid ]);
          })
        }
        
      });
    });
    
    // just in case the lat and lng was not set
    // put the current location
    if(!this.lat || !this.lng){
      this.setCurrentPosition();
    }
    
  }

  private setCurrentPosition() {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition((position) => {
        this.lat = position.coords.latitude;
        this.lng = position.coords.longitude;
         console.log("geolocation", this.lat, this.lng);
        this.zoom = 12;
      });
    }
  }

  ngAfterViewInit() {
    $(this._el.nativeElement.ownerDocument).foundation();
  }

  onSearch(){
    
  }

}