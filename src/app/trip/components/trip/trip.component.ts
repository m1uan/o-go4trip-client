// 
// File generated by `npm run generate:blank place/components/trip`
//
// After activate you can access from 
//
// http://localhost:5000/#/dev/place/components/trip
//
//
// for ACTIVATE please add IMPORT and ROUTE in `src/app/dashboard/dashboard.ts`
//
// /*
//  * Here is router imports
//  */
// import { Trip } from './place/components/trip';
// 
//  ..
//  ..
//  ..
//
//  @RouteConfig([
//      { path: '/dev/place/components/trip', component: Trip, name: 'Tripplace-components/trip' },   
//
//  ..
//  .. 
//


import { Component, ViewContainerRef, ElementRef, NgZone} from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { ResizeEvent } from 'angular-resizable-element';

import { Router, ActivatedRoute, Params } from '@angular/router';

import { DragulaService, dragula } from 'ng2-dragula';

import * as numeral from 'numeral';
import * as moment from 'moment';
import * as _ from 'lodash';

import { AlertComponent } from 'ng2-bootstrap/ng2-bootstrap';

import {EviService} from '../../../shared/services/evi.service';

import {TripService} from '../../services/trip.services';

let $ = require('jquery/dist/jquery.js');
let foundation = require('foundation-sites/dist/js/foundation.js');

interface PlaceInfo {
  places : Array<any>;
  current : any;
  index : number;
}


interface LngLat {
  lng: number;
  lat: number;
}

@Component({
  // The selector is what angular internally uses
  // for `document.querySelectorAll(selector)` in our index.html
  // where, in this case, selector is the string 'home'
  selector: 'home',  // <home></home>
  // We need to tell Angular's Dependency Injection which providers are in our app.
  providers: [
  ],
   styleUrls: [ './trip.component.scss' ],
  // Every Angular template is first compiled by the browser before Angular runs it's compiler
  templateUrl: './trip.component.html'
})
export class TripComponent {
  private BAG = false;


  public tripUuid : any;

  public trip = null;

  public activeWayUuid = null;
  public activeWayIndex = null;
  public ways = [];

  public places = [];

  
  
  public style: Object = {};
   
  placeInfos : Array<PlaceInfo> = [] as Array<PlaceInfo>; 

  public highlightPlaceId = null;

  lastPlace = { } as LngLat;

  totalMinutes = 0;
  alternativeDays = 0;
  alternativeHours = 0;
  alternativeMinutes = 0;
  totalKm = 0;

  private myDatePickerOptions = {
        // other options...
        dateFormat: 'dd.mm.yyyy',
    };
    
  // TypeScript public modifiers
  constructor(private evi : EviService, 
                private route : ActivatedRoute, 
                private router : Router,
                private _el: ElementRef, 
                private _dragulaService : DragulaService, 
                public tripService : TripService,
                public zone: NgZone ) {
    
   
    // https://github.com/valor-software/ng2-dragula/issues/442
    this.BAG  = this._dragulaService.find('bag');
    if (this.BAG !== undefined ) {
      this._dragulaService.destroy('bag');
    }

    // http://valor-software.com/ng2-dragula/index.html
    this._dragulaService.setOptions('bag', {
      moves: function (el, container, handle) {
        return handle.className === 'handle';
      }
    });

    

    _dragulaService.dropModel.subscribe((value, value2, value3) => {
      this.onDropModel(value, value2, value3);
    });
    
    _dragulaService.removeModel.subscribe((value) => {
      this.onRemoveModel(value.slice(1));
    });
    
    _dragulaService.drag.subscribe((value) => {
      //this.onDrag(value.slice(1));
    });
    _dragulaService.drop.subscribe((value) => {
      //this.onDrop(value.slice(1));
    });
    _dragulaService.over.subscribe((value) => {
      //this.onOver(value.slice(1));
    });
    _dragulaService.out.subscribe((value) => {
      //this.onOut(value.slice(1));
    });
  }

  public ngOnInit() {

     const sub = this.route.params.subscribe(params => {
       this.tripUuid = params['id'];
       
       let activeWayUuid = null;
       if(params['uuid']){
          activeWayUuid = params['uuid'];
       } 
       
        // could happend the visitor of this page
        // is comming with empty id -> show just search box
        if(this.tripUuid){
            this.load(this.tripUuid, activeWayUuid);
        }

        if(params['placeId']){
          this.highlightPlaceId = params['placeId'];
          
        }
     });

  }

  public load(id, uuid){

    this.tripService.loadTrip(id, uuid, (data) => this.updateTrip(data));
  }


  public ngAfterViewInit() {
    $(this._el.nativeElement.ownerDocument).foundation();
  }
  
    
  private onDropModel(args, args2, args3) {
    let [name, el, target, source] = args;
    let placeId = el.id.split('-')[0];
    let newIndex, newIndexCount = 0;

    target.childNodes.forEach((child, idx)=>{

      // in childNodes are also childs what is not places
      // so take it by id name
      if(child.id && child.id.split('-').slice(1).join('-') == 'places-id'){
        
        if(child.id == el.id){
          newIndex = newIndexCount;
          //return true;
        }

        newIndexCount ++;
      }
      
    })

    this.tripService.placeChangeOrder(this.activeWayUuid, placeId, newIndex, (data)=>this.updatePlaces(data.places));


  }

  private onRemoveModel(args) {
    let [el, source] = args;
  }
  
  public onDelete(event){
    this.tripService.placeDelete(this.activeWayUuid, event, (data)=> this.updatePlaces(data.places));
  }

  public updateTrip(tripData){


    this.trip = tripData.trips;

    

    // TODO:
    
    this.trip.dateStart = +moment().endOf('day').add('seconds',1);
    
    


    this.ways = [];

    // put mian to top of list
    tripData.alternatives.forEach(way=>{
      if(way.id == this.trip.main_way_id){
        // put at first
        this.ways.splice(0, 0, way);
      } else {
        this.ways.push(way);
      }
      
    })

    // set active trip looking in this.ways
    this.setActiveTripWay(tripData.current);
    this.updatePlaces(tripData.current.placesmoves);
  }

  public updatePlaces(places){
    this.places = places;

    this.updateTimeForActiveWay();

    if(this.highlightPlaceId){

      window.setTimeout(()=>{
          // in some cases the id of place stays in url
          // ond in object `this.highlightPlaceId`
          // but we for examlple remove this place and element doesn't exist
          let element = $("#" + this.highlightPlaceId + "-places-id");
          if(element){
            window.scrollTo(0, element.offset().top);
          }
          
      }, 300)
    }
    
    
  }

  public onAnyPlaceResize(){
    this.zone.run(()=>{
      this.updateTimeForActiveWay();
    });
  }

  public updateTimeForActiveWay(){
    

    let totalKm = 0;
    let timeVisit = 0;
    let timeTransport = 0;

    this.places.forEach((place)=>{
        
        // place have to know when to start
        place.dateArrive = this.trip.dateStart + this.totalMinutes * 60 * 1000;
        place.dateDeparting = (place.dateArrive + (place.stayover*60*1000));

        timeVisit += +place.stayover;

        if(place.moves){
          console.log('updateTimeForActiveWay-place.moves',place.moves.timetake, place.moves.km);
          timeTransport += place.moves.timetake;
          totalKm += place.moves.km;
        }


    })

    //let totalHours = Math.floor(this.totalMinutes/60);
    
    let activeWay = this.ways[this.activeWayIndex];
    activeWay.total_km = totalKm;
    activeWay.time_transport = timeTransport;
    activeWay.time_visit = timeVisit;

    console.log('updateTimeForActiveWay', totalKm, activeWay);
  }

  public setActiveTripWay(way){
    
    this.activeWayUuid = way.uuid;
    
    this.ways.some((w, idx)=>{
      
      if(way.uuid == w.uuid){
        
        this.activeWayIndex = idx;
        return true;
      }
    })

    this.loadAlternative(this.activeWayUuid);

    return false;
  }

  public loadAlternative(uuid){
    this.tripService.getAlternative(uuid, (tripWay)=>{
      this.updatePlaces(tripWay.placesmoves);
    });

    return false;
  }

  public cloneAlternative(uuid, reverse = false){
    this.tripService.cloneAlternative(uuid, reverse, (tripWay)=>{
      
      this.ways.push(tripWay);
      
      this.setActiveTripWay(tripWay.uuid);
    });

    return false;
  }

  public createTripFromTripWay(uuid, reverse = false){
    this.tripService.createTripFromTripWay(uuid, reverse, (trips)=>{
      this.router.navigate(['/trip', trips.uuid ]);
    });

    return false;
  }
  
  

  public doDeleteTripWay(uuid, idx){
    // user is on trip way what is to deleted
    // please select another tripway
    if(this.activeWayUuid == uuid){
      // find main trip
      this.ways.some((way)=>{
        if(way.id == this.trip.main_way_id){
          this.setActiveTripWay(way.uuid);
          return true;
        }
      });
      
    }

    this.tripService.deleteTripWay(uuid, (way)=>{
      this.ways.splice(idx, 1);
    });
  }

   public doUpdateTripWay(way, idx){
    this.tripService.updateTripWay(way, (updatedWay)=>{
      this.ways.splice(idx, 1, updatedWay);
      //this.ways.push(alternative);
    });
  }

  public setTripWayAsMain(way, idx){
    this.tripService.setTripWayAsMain(way.uuid, (updatedWay)=>{
      this.trip.main_way_id = way.id;

      this.ways.splice(idx, 1);
      this.ways.splice(0, 0, way);

      // switch to selected
      this.setActiveTripWay(way.uuid);
      //this.ways.push(alternative);
    });
  }

  // dateChanged callback function called when the user select the date. This is mandatory callback
  // in this option. There are also optional inputFieldChanged and calendarViewChanged callbacks.
  onDateChanged(event: any) {
      // event properties are: event.date, event.jsdate, event.formatted and event.epoc
  }
  
  tripReturnBackChange(event:any){
    this.tripService.setTripReturnBack(this.trip.uuid, this.activeWayUuid, this.trip.returnBack, (data)=>{
        this.updatePlaces(data.current.placesmoves);
        this.updateCurrentWay(data.current);
    });
  }
  updatesNum = 1;

  updateCurrentWay(newWay){

    let oldWay = this.ways[this.activeWayIndex];

    if(newWay){
      for(let item in newWay){
        this.ways[this.activeWayIndex][item] = newWay[item];

      }
    }

    oldWay.name = oldWay.name + '' + this.updatesNum++;
  }

}

