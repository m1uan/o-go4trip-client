// 
// File generated by `npm run generate:blank place/components/trip`
//
// After activate you can access from 
//
// http://localhost:5000/#/dev/place/components/trip
//
//
// for ACTIVATE please add IMPORT and ROUTE in `src/app/dashboard/dashboard.ts`
//
// /*
//  * Here is router imports
//  */
// import { Trip } from './place/components/trip';
// 
//  ..
//  ..
//  ..
//
//  @RouteConfig([
//      { path: '/dev/place/components/trip', component: Trip, name: 'Tripplace-components/trip' },   
//
//  ..
//  .. 
//


import { Component, ViewContainerRef, ElementRef } from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { ResizeEvent } from 'angular-resizable-element';

import { Router, ActivatedRoute, Params } from '@angular/router';

import { DragulaService, dragula } from 'ng2-dragula';

import * as numeral from 'numeral';
import * as moment from 'moment';
import * as _ from 'lodash';

import { AlertComponent } from 'ng2-bootstrap/ng2-bootstrap';

import {EviService} from '../../../shared/services/evi.service';

import {TripService} from '../../services/trip.services';

let $ = require('jquery/dist/jquery.js');
let foundation = require('foundation-sites/dist/js/foundation.js');

interface PlaceInfo {
  places : Array<any>;
  current : any;
  index : number;
}


interface LngLat {
  lng: number;
  lat: number;
}

@Component({
  // The selector is what angular internally uses
  // for `document.querySelectorAll(selector)` in our index.html
  // where, in this case, selector is the string 'home'
  selector: 'home',  // <home></home>
  // We need to tell Angular's Dependency Injection which providers are in our app.
  providers: [
  ],
   styleUrls: [ './trip.component.scss' ],
  // Every Angular template is first compiled by the browser before Angular runs it's compiler
  templateUrl: './trip.component.html'
})
export class TripComponent {
  private BAG = false;

  public places = [];

  public alternatives = [];
  
  public style: Object = {};
   
  placeInfos : Array<PlaceInfo> = [] as Array<PlaceInfo>; 

  id : any;

  uuid : any;

  lastPlace = { } as LngLat;

  totalMinutes = 0;
  alternativeDays = 0;
  alternativeHours = 0;
  alternativeMinutes = 0;
  totalKm = 0;
    
  // TypeScript public modifiers
  constructor(private evi : EviService, private route : ActivatedRoute, private _el: ElementRef, private _dragulaService : DragulaService, public tripService : TripService ) {
    
   
    // https://github.com/valor-software/ng2-dragula/issues/442
    this.BAG  = this._dragulaService.find('bag');
    if (this.BAG !== undefined ) {
      this._dragulaService.destroy('bag');
    }

    // http://valor-software.com/ng2-dragula/index.html
    this._dragulaService.setOptions('bag', {
      moves: function (el, container, handle) {
        return handle.className === 'handle';
      }
    });

    

    _dragulaService.dropModel.subscribe((value, value2, value3) => {
      this.onDropModel(value, value2, value3);
    });
    
    _dragulaService.removeModel.subscribe((value) => {
      this.onRemoveModel(value.slice(1));
    });
    
    _dragulaService.drag.subscribe((value) => {
      //this.onDrag(value.slice(1));
    });
    _dragulaService.drop.subscribe((value) => {
      //this.onDrop(value.slice(1));
    });
    _dragulaService.over.subscribe((value) => {
      //this.onOver(value.slice(1));
    });
    _dragulaService.out.subscribe((value) => {
      //this.onOut(value.slice(1));
    });
  }

  public ngOnInit() {

    

    

     const sub = this.route.params.subscribe(params => {
       this.id = params['id'];
       this.uuid = params['uuid'];
        // could happend the visitor of this page
        // is comming with empty id -> show just search box
        if(this.id && this.uuid){
            this.load(this.id, this.uuid);
        }
     });


    
  }

  public load(id, uuid){
    console.log(id, uuid);
    this.tripService.loadTrip(id, uuid, (data) => this.updateTrip(data));
  }


  public ngAfterViewInit() {
    $(this._el.nativeElement.ownerDocument).foundation();
  }
  
    
  private onDropModel(args, args2, args3) {
    let [name, el, target, source] = args;
    let placeId = el.id.split('-')[0];
    let newIndex, newIndexCount = 0;

    target.childNodes.forEach((child, idx)=>{
      console.log(child.id ? child.id.split('-').slice(1).join('-') : 'no id');

      // in childNodes are also childs what is not places
      // so take it by id name
      if(child.id && child.id.split('-').slice(1).join('-') == 'places-id'){
        
        if(child.id == el.id){
          newIndex = newIndexCount;
          //return true;
        }

        newIndexCount ++;
      }
      
    })

    this.tripService.placeChangeOrder(this.uuid, placeId, newIndex, (data)=>this.updatePlaces(data.places));

    // do something else
    console.log('onDrop', args, el.id, placeId, newIndex);
  }

  private onRemoveModel(args) {
    let [el, source] = args;
    // do something else
    console.log(args);
  }
  
  public onDelete(event){
    console.log('public onDelete(event)', event);
    this.tripService.placeDelete(this.uuid, event, (data)=> this.updatePlaces(data.places));
  }

  public updateTrip(tripData){
    this.updatePlaces(tripData.main.placesmoves);
    this.alternatives = tripData.alternatives;
  }

  public updatePlaces(places){
    this.places = places;

    this.updateTimeForAlternative();
    
  }

  public updateTimeForAlternative(){


    this.totalMinutes = 0;
    this.totalKm = 0;

    this.places.forEach((place)=>{
        this.totalMinutes += +place.stayover;

        if(place.moves){
          this.totalMinutes += place.moves.timetake;
          this.totalKm += place.moves.km;
        }

    })

    let totalHours = Math.floor(this.totalMinutes/60);
    
    this.alternativeDays = Math.floor(totalHours/24);
    this.alternativeHours = totalHours % 24;
    this.alternativeMinutes = this.totalMinutes %60;
  }

  public loadAlternative(uuid){
    this.tripService.getAlternative(uuid, (alternative)=>{
      this.updatePlaces(alternative.placesmoves);
    });

    return false;
  }

  public cloneAlternative(uuid, reverse = false){
    this.tripService.cloneAlternative(uuid, reverse, (alternative)=>{
      this.alternatives.push(alternative);
    });

    return false;
  }
  

}

