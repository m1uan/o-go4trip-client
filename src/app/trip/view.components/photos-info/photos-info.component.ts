// 
// File generated by `npm run generate:blank trip/components.view/place-info/place-info`
//
// After activate you can access from 
//
// http://localhost:5000/#/dev/trip/components.view/place-info/place-info
//
//
// for ACTIVATE please add IMPORT and ROUTE in `src/app/dashboard/dashboard.ts`
//
// /*
//  * Here is router imports
//  */
// import { Place-info } from './trip/components.view/place-info/place-info';
//

import { Component, ViewContainerRef, ElementRef, Input, Output,EventEmitter } from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { Router, ActivatedRoute, Params } from '@angular/router';
import { ResizeEvent } from 'angular-resizable-element';

import * as numeral from 'numeral';
import * as moment from 'moment';
import * as _ from 'lodash';

import { AlertComponent } from 'ng2-bootstrap/ng2-bootstrap';
import {EviService} from '../../../shared/services/evi.service';

import {TripService} from '../../services/trip.services';

let $ = require('jquery/dist/jquery.js');

import {CloudinaryImageComponent} from 'ng2-cloudinary';

import * as elementResizeDetectorMaker from 'element-resize-detector';

@Component({
  // The selector is what angular internally uses
  // for `document.querySelectorAll(selector)` in our index.html
  // where, in this case, selector is the string 'home'
  selector: 'g4t-photos-info-view',  // <home></home>
  // We need to tell Angular's Dependency Injection which providers are in our app.
  providers: [
  ],
   styleUrls: [ './photos-info.component.scss' ],
  // Every Angular template is first compiled by the browser before Angular runs it's compiler
  templateUrl: './photos-info.component.html'
})
export class PhotosInfoViewComponent {
  @Output('onDelete') onDeleteEmitter = new EventEmitter();
  @Input('photos') photosSrc : any;
  @Input('cloudinary') cloudinary: string;
  @Input('index') index : number;
  @Input('wayUuid') uuid: string;
  @Input('height') height: string;

  photos = [];

  mainStyle = {
    height : '0px'
  }

  mapPhotoStyle = {

  }

  timerToSave = null;
  timerToShow = null;

  
  
  // TypeScript public modifiers
  constructor(private evi : EviService, private route : ActivatedRoute, private _el: ElementRef, private _tripService : TripService) {
      
  }

  public ngOnInit() {
    
  }

  public ngOnChanges(changes: any){
    this.mainStyle.height = this.height + 'px';
  }

  public ngAfterViewInit() {

    let resizeDetector = elementResizeDetectorMaker({ strategy: 'scroll'});
    
    let element = document.getElementById('place-images-'+ this.cloudinary);

    

    resizeDetector.listenTo(this._el.nativeElement.childNodes[1], (elem: HTMLElement) => {
        
        const mapWidth = 250; //Math.floor((elem.offsetWidth*0.3));
        const restWidth = elem.offsetWidth - mapWidth;

        let photoMax = 5;
        let photoHight = elem.offsetHeight;
        let photoWidth = Math.floor((restWidth)/5-4);
        

        const downloadWidth = 240; // http://size43.com/jqueryVideoTool.html
        const downloadHight = 135; // 16:9
        const photoWidthRatio = photoWidth / downloadWidth;

        // let say the widh of image is 200 so the ratio will be 0.8
        // then photo max hight is 124
        const photoMaxHight = Math.ceil(downloadHight* photoWidthRatio);

        // lets count how many times you can put to the screen
        // maybe we can create 2 or 3 rows
        // otherwise the image will be multiplayed in backgroudnd
        const numPhotoRows = Math.ceil(elem.offsetHeight/ photoMaxHight);

        photoHight = elem.offsetHeight/numPhotoRows;
        photoMax = photoMax* numPhotoRows;


        this.mapPhotoStyle = {
            backgroundImage : 'url(https://res.cloudinary.com/miuan/image/upload/w_400,h_225,c_fill,g_center/'+ this.cloudinary,
            width:  mapWidth + 'px',
            height: Math.floor(elem.offsetHeight) + 'px',
            backgroundPosition: 'center',
            backgroundSize: 'crop'
        }

        this.photos = [];

        this.photosSrc.some((p, idx)=>{
          if(idx > photoMax){
            return true;
          }

          let cloudinarySrc = 'url(https://res.cloudinary.com/miuan/image/upload/w_'+downloadWidth+',h_'+downloadHight+',c_fill,g_center/' + p.cloudinary + ')';
          // http://stackoverflow.com/questions/493296/css-display-an-image-resized-and-cropped
          let photoStyle = {
            backgroundImage : cloudinarySrc,
            width:  photoWidth + 'px',
            height: photoHight + 'px',
            backgroundPosition: 'center',
            backgroundSize: 'crop'
          }


          this.photos.push(photoStyle);
        })

        let photoRest = photoMax - this.photos.length;

        if(photoRest > 0){
          let pidx = 0;

          for(let i = 0; i < photoRest; i++, pidx++){
            this.photos.push(this.photos[pidx]);
          }
        }

    })
  }

  ngDoCheck() { 
    

  }
  

}