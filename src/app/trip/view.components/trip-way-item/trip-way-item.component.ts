// 
// File generated by `npm run generate:blank trip/components.view/timeline/timeline`
//
// After activate you can access from 
//
// http://localhost:5000/#/dev/trip/components.view/timeline/timeline
//
//
// for ACTIVATE please add IMPORT and ROUTE in `src/app/dashboard/dashboard.ts`
//
// /*
//  * Here is router imports
//  */
// import { Timeline } from './trip/components.view/timeline/timeline';
// 
//  ..
//  ..
//  ..
//
//  @RouteConfig([
//      { path: '/dev/trip/components.view/timeline/timeline', component: Timeline, name: 'Timelinetrip-components.view/timeline/timeline' },   
//
//  ..
//  .. 
//


import { Component, ViewContainerRef, ElementRef, Input, Output, EventEmitter} from '@angular/core';

import { Http, Response, Headers, RequestOptions } from '@angular/http';

import { Observable } from 'rxjs/Rx';


import { Router, ActivatedRoute, Params } from '@angular/router';

import * as numeral from 'numeral';
import * as moment from 'moment';
import * as _ from 'lodash';

import { AlertComponent } from 'ng2-bootstrap/ng2-bootstrap';

import {EviService} from '../../../shared/services/evi.service';

import { Modal, BSModalContext } from 'angular2-modal/plugins/bootstrap';

let $ = require('jquery/dist/jquery.js');

@Component({
  // The selector is what angular internally uses
  // for `document.querySelectorAll(selector)` in our index.html
  // where, in this case, selector is the string 'home'
  selector: 'g4t-trip-way-item',  // <home></home>
  // We need to tell Angular's Dependency Injection which providers are in our app.
  providers: [
  ],
   styleUrls: [ './trip-way-item.component.scss' ],
  // Every Angular template is first compiled by the browser before Angular runs it's compiler
  templateUrl: './trip-way-item.component.html'
})
export class TripWayItemComponent {

  @Input('allWays') public allTripWays;
  @Input('way') public way;
  @Input('trip') public trip;
  @Input('activeWay') public activeWay;
  @Input('cloudinary') public cloudinary;
  @Input('timeVisit') public timeVisit;
  @Input('timeTransport') public timeTransport;

  @Output('setActiveTripWay') public setActiveTripWayEmitter : EventEmitter = new EventEmitter();
  @Output('doDeleteTripWay') public doDeleteTripWayEmitter : EventEmitter = new EventEmitter();
  @Output('doUpdateTripWay') public doUpdateTripWayEmitter : EventEmitter = new EventEmitter();
  @Output('cloneAlternative') public cloneAlternativeEmitter : EventEmitter = new EventEmitter();
  @Output('createTripFromTripWay') public createTripFromTripWayEmitter : EventEmitter = new EventEmitter();
  @Output('setTripWayAsMain') public setTripWayAsMainEmitter : EventEmitter = new EventEmitter();


  public priceSettings = [
    
    {name: 'CZK total', currency: 1, config: 1},
    {name: 'CZK per KM', currency: 1, config: 0},
    
    {name: 'EUR total', currency: 2, config: 1},
    {name: 'EUR per KM', currency: 2, config: 0},
    
    {name: 'USD total', currency: 3, config: 1},
    {name: 'USD per KM', currency: 3, config: 0},
  ];

  public currentSetting = this.priceSettings[0];

  public mapStyle = {

  }
    
  constructor(private evi : EviService, private route : ActivatedRoute, private _el: ElementRef, public modal: Modal ) {
      
  }

  public ngOnInit() {

  }


  public ngOnChanges(changes: any){
    console.log('ngOnChanges', this.way.cloudinary);
    let imageUrl = 'url(https://res.cloudinary.com/miuan/image/upload/w_100,h_100,c_fill,g_center/'+ this.way.cloudinary;

    this.mapStyle= {
            backgroundImage : imageUrl,
            width:  '100px',
            height: "100px",
            backgroundPosition: 'center',
            backgroundSize: 'crop'
        }


    this.priceSettings.forEach((ps)=>{

    })
  }



  public onActivateTripWayAction(way, actionName){
    if(actionName == 'rename'){
      way.nameOrigin__ = way.name;
    }


    this.allTripWays.forEach(wayEach=>{
      wayEach.deleteActive__ = false;
      wayEach.renameActive__ = false;
      
      // just for case the name was changed
      if(wayEach.nameOrigin__){
        wayEach.name = wayEach.nameOrigin__;
        wayEach.nameOrigin__ = null;
      }
    })

    way[actionName+'Active__'] = true;


    return true;
  }

  onTransportPrice(){
    this.modal.alert()
        .size('lg')
        .showClose(true)
        .title('A simple Alert style modal window')
        .body(`
            <h4>Alert is a classic (title/body/footer) 1 button modal window that 
            does not block.</h4>
            <b>Configuration:</b>
            <ul>
                <li>Non blocking (click anywhere outside to dismiss)</li>
                <li>Size large</li>
                <li>Dismissed with default keyboard key (ESC)</li>
                <li>Close wth button click</li>
                <li>HTML content</li>
            </ul>`)
        .open();
  }

  onCurrencyChange(settingIndex){
    let oldCurrency = this.currentSetting.currency;
    let oldConfig = this.currentSetting.config;

    this.currentSetting = this.priceSettings[settingIndex];

    // TODO: change currency in trip

  }


}